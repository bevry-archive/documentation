```
title: Advanced Servers
```


## Static File Server

One popular use case is to serve files directly from a directory on our machine.

For this, we will setup a configuration module at `config.js` that contains:

<%- @codeFile('./~examples/04-server-advanced/config.js') %>

Which our application will include via `require('./config')` (extensions are optional).


### Read File

The most basic way of accomplishing this, is to use [fs.readFile](https://nodejs.org/dist/latest-v5.x/docs/api/fs.html#fs_fs_readfile_file_options_callback)

<%- @codeFile('./~examples/04-server-advanced/server-readfile.js') %>

Test it: `curl http://localhost:8000/server-static.js`

However, readFile will read the entire file, then send the entire file. Take a moment to imagine how this not optimum.


### Streams

The next most basic way, is to use a [Readable Stream](https://nodejs.org/dist/latest-v5.x/docs/api/stream.html#stream_class_stream_readable) via [fs.createReadStream](https://nodejs.org/dist/latest-v5.x/docs/api/fs.html#fs_fs_createreadstream_path_options).

<%- @codeFile('./~examples/04-server-advanced/server-stream.js') %>

Test it: `curl http://localhost:8000/server-static.js`


### Directories

Getting more advanced here. What about outputting the contents of directories too? For this, we can use [fs.readdir](https://nodejs.org/dist/latest-v5.x/docs/api/fs.html#fs_fs_readdir_path)

<%- @codeFile('./~examples/04-server-advanced/server-static.js') %>

Test it: `curl http://localhost:8000`


## Applying Abstractions

Considering the static file server example is incredibly common. Lets think of ways we can abstract out the serving of static files so we can re-use that functionality easily.

Desiring a solution like:

<%- @codeFile('./~examples/04-server-advanced/server-static-module.js') %>

One could come up with the following:

<%- @codeFile('./~examples/04-server-advanced/serve-static.js') %>

Note the introduction of a `next` callback. This allows us to chain additional or custom functionality.

<%- @codeFile('./~examples/04-server-advanced/serve-static-custom.js') %>



## Introduction to Middlewares

In our previous example of writing the `serveStatic` what we effectively did was create a middleware, albiet a basic middleware but a middleware nonetheless. Naturally, there are already [plenty of other middlewares](https://npmjs.org/browse/keyword/middleware) published as modules by other people. This is helped by the middleware framework [Connect](http://senchalabs.org/connect/) originally by [TJ Holowaychuk](https://github.com/visionmedia).

Using connect, our static file server example would become:

<%- @codeFile('./~examples/04-server-advanced/connect-static.js') %>

Much simpler. Notice how the middlewares are like a waterfall, it hits the first, then if the first doesn't know what to do, the logic will flow through to the next middleware (accomplished by the previous middleware calling the `next` callback inside it).

> Connect has plenty of other middlewares available for it. [Official middlewares for connect are listed on its website](http://www.senchalabs.org/connect/) with [3rd party middleware listed on github](https://github.com/senchalabs/connect/wiki). You'll want to check them out.


## Introduction to Web Frameworks

There are a [few web frameworks for node](http://stackoverflow.com/questions/3809539/choosing-a-web-application-framework-using-node-js). The most used is [Express](http://expressjs.com/) originally by [TJ Holowaychuk](https://github.com/visionmedia).

> Perhaps by now you would have noticed the amount of individuals mentioned who have created awesome things, this is very much the case, anyone can have an impact.

Express can be thought of as a layer that sits ontop of connect and node's http module. It provides its own middleware and uses its own request and response objects that inherit from those of node's http module. The benefit over just using connect are:

- Addition of routing
- Common functionality provided through a friendly syntax

The following is what a simple hello world server would look like with express:

<%- @codeFile('./~examples/04-server-advanced/express-basic.js') %>

> It is important to note that the line `var server = app.listen(3000);` is the same as doing `var server = require('http').createServer(app).listen(80);`. You will need to remember this when interfacing with other modules - some modules like to interface with the express instance `app` while others like to interface with the node http server instance `server` instead.

And this is what our static file server will look like with express:

<%- @codeFile('./~examples/04-server-advanced/express-static.js') %>

Notice the nicer syntax for setting the status code of the response. Before it was `res.statusCode = 404;` now it is the first argument of `res.send` - this is what we meant by express providing a nicer syntax :)
